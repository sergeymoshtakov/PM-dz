﻿Управління програмними проєктами. Вступ.

Створюємо консольний проєкт
! Вибираємо роздільне збереження проєкту та застосунку (рішення)
У рішення додаємо проєкт - MS Test
! Платформа проєкта має збігатись з платформою попереднього проєкту

Управління проєктами - наука, яка вивчає методи управління
- управління ресурсами (у т.ч. логістика, HR-HumanResources, бюджет)
- управління часом (time-management)
- управління якістю (у т.ч. QA - quality assurance)
- управління знаннями (повторюваність проєкту)

Схеми управління проєктом
Розділяють два типи схем:
- каскадні (водоспадні, жорсткі) моделі управління
- ітеративні (водовирні, гнучкі, Agile) моделі управління

Каскадні схеми складаються з багатьох етапів, кожен з яких має
своє місце у послідовності робіт. Деякі можуть виконуватись
паралельно, деякі послідовно. Вся послідовність робіт часто
зображається діаграмою Ганта
--------- час --------------------------------------------->
формування ТЗ    Розробка дизайну
---------------  -----------------------    ===
                 Сруктура БД   ORM/API
                 ----------- ---------
                              Випробування дизайну
                              ----------===== 
                            Програмування
                            ---------------------------

Ітеративні схеми складаються з невеликої кількості етапів/дій
які постійно повторюються, збільшуючи власний масштаб, але протягом
нетривалого часу (від тижня до місяця).
ПВПД - Плануй-Виконуй-Перевіряй-Дій

SCRUM - один з методів управління за ітеративною схемою.
Спринт - ітерація, комплекс завдань, що становлять певну цілісність.
Скрам-дошка - спосіб управління (моніторингу, тощо) спринтом
Картка - завдання (у спринті), що також може складатись з пунктів (задач)

Д.З. Опанувати роботу зі SCRUM-дошкою на вибір:
- Github Projects
- Trello
- Jira
- ...
Створити спринт (проєкт), скласти декілька карток із завданнями
встановити рубіжі (Milestone), розподілити задачі за ними.
Додати посилання або скриншот дошки із картками різного статусу.

-----------------------------------------------------------------
Сумісна робота з проєктом
На прикладі репозиторію GitHub
Вихідна ситуація: декілька учасників проєкту вносять у нього зміни
(працюють над ним) і передають зміни до репозиторію. Імітуємо цю 
роботу шляхом внесення змін а) зі Студії, б) засобами GitHub
Схема 1.
1. У Студії змінюємо файл (даний),  не робимо коміт
2. У GitHub змінюємо інший файл і робимо коміт
3. Повертаємось до Студії, робимо коміт, даємо Push
4. З'являється повідомлення, що пуш неможливий, оскільки віддалений
    репозиторій більш новий, ніж локальний (через коміт з GitHub на п.2)
5. Повідомлення пропонує Pull then Push -- автоматично оновити
    локальний репозитоій і потому додати свої зміни
6. Після їх прийняття робиться додатковий git merge який поєднує
    коміти, зроблені з різних місць

Схема 2.
1. У Студії змінюємо файл (даний), не робимо коміт
2. У GitHub змінюємо той самий файл і робимо коміт
3. Повертаємось до Студії, робимо коміт, даємо Push
4. З'являється повідомлення, що пуш неможливий, оскільки віддалений
    репозиторій більш новий, ніж локальний (через коміт з GitHub на п.2)
5. Повідомлення пропонує Pull then Push -- автоматично оновити
    локальний репозитоій і потому додати свої зміни
6! Зміни не поєднуються, оскільки протирічать одна іншій, тому
    відкривається вкладка з відмінностями та пропонується запуск
    інструменту злиття
7. Запускаємо цей інструмент, він складається з трьох частин:
    - стан віддаленого документу
    - стан поточного документу
    - підсумковий стан
    Редагуємо підсумковий стан шляхом вибору одного чи обох варіантів
8. Приймаємо та фіксуємо зміни (злиття) - Accept Merge
9. Даємо назву коміту на пушимо його

Небезпечні моменти
 - автоматично прийняти віддалений коміт - скасуються всі локальні наробки.
 - автоматично прийняти локальну версію - скасуються наробки інших

Висновки:
 - командну роботу слід розподіляти так, щоб не було робіт з однаковими
    файлами.
 - злиття гілок (branches) слід доручати менеджеру проєкту